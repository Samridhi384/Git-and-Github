Git is a Version control system that is a vcs is something which can track and manage the changes of file

Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency

Git can stand for global information tracker

ls , cd 
type nul > file.txt = to create new file
start . =  to open the folders
start Desktop to see what is inside Desktop
ls Desktop also be used

ls Desktop/Pets

pwd = my current location where i am right now

 touch purple.js = can also be used to create new file

 mkdir yellow cyan = makes new directory or folders , it avoids creating duplicate videos

 rm purple.js = it permanentaly deletes the file and not folders

 ls -a is used to show hidden directories

 rm -rf used to delete a folder permanentaly

next we can do git init , git status . git add . ,  git commit -m "initial commit"
 
each commit should focus on one single thing

git commit and it will open to vim editor here press i to insert message and press esc & :wq q to quit and w to write and save

 git config --global core.editor "code --wait" to use vs code as editor  instead of cmd and here we can write long messages too

 https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config for refrence

git log --abbrev-commit
git log --oneline
these two commands help to remove extra space from logs     

we can do git commit with git kraken also

suppose u forgot to add a file or made a typo 
 git commit -m 'some commit'
 git add forgotten_file
 git commit --amend

so if we want to commit again after some changes and we write

https://www.toptal.com/developers/gitignore to add gitignore file with some useful content

in gitignore file write as node_modules/ in order to ignore all files inside that folder

https://git-scm.com/docs/gitignore REFER PATTERN FORMATS

head -> master means the current location is of master branch 

git branch = shows the list of all  branches present in your repository and  which one is currently active (master) has * mark 

git branch branchname  -> creates a new branch named branchname
git switch branchname  -> moves your head to branchname and switches you to that branch

git switch -c branchname -> at a go create and switch branches

git checkout branchname =  also used to switch brances and some other use cases also
 git checkout music

 git commit -a -m "new music" to add file and message pass

 if we create a new file and withot commiting if we will switch branc and then it will follow you until  you commit

 git branch -D emptyPlaylist  to delete the branch but you should be in some other branch

  git branch -m genZMusic -> renames the current branch

git checkout 7d0fa18 to switch to previous commit that is in detached head state

HEAD~1 refers to the commit before HEAD (parent)
HEAD~2 refers to 2 commits before HEAD (grandparent)

git checkout HEAD~1

git checkout HEAD dog.txt = to remove extra content from file and get updated from previous commit 
or 
 git checkout -- cat.txt dog.txt

Suppose you've made some changes to a file since your
 last commit. You've saved the file but then realize you
 definitely do NOT want those changes anymore!
 To restore the file to the contents in the HEAD, 
use 

git restore <file-name>

git restore --source HEAD~2 dog.txt to get content of 2 commits prior
 git restore --staged secret.txt to restore staged content into unstaged content


git reset 60752f7
 Suppose you've just made a couple of commits on the
 master branch, but you actually meant to make them on
 a separate branch instead.  To undo those commits, you
 can use git reset.
 git reset <commit-hash> will reset the repo back to a
 specific commit.  The commits are gone  it will not chnage file content but will simply move to previous commit

  git reset --hard b1c1db5
used to undo the changes and come to particular commit at a time once the content is gone it can not be redo 

git revert instead creates a brand new commit which
 reverses/undos the changes from a commit. Because it
 results in a new commit, you will be prompted to enter a
 commit message  
  git revert 65d103a

when you r working in team then recommend to use git revert as git reset will remove the history while others still have it so might be confusion 

git pull upstream main = to pull from main owner while forking

git rebase can be used to merge the branch or as cleanup tool

git rebase master

with rebase
rebaseDemo (feature)
$ git log --oneline
e6568f8 (HEAD -> feature) more work on feature
b8020a7 add feature
e42430c new file
ec79602 (master) Add login form
1e51cb4 add footer
add3468 Add Navbar
99099a9 add website file

without rebase 
rebaseDemo (feature)
$ git log --oneline
586c4fd (HEAD -> feature) Merge branch 'master' into feature
ec79602 (master) Add login form
20902d2 more work on feature
1d419ce Merge branch 'master' into feature
1e51cb4 add footer
e0db2c3 add feature
0b2eb1a new file
add3468 Add Navbar
99099a9 add website file


 git rebase -i HEAD~6 if we want to rename or change any commit message then we can use this here 6 is the commit number we want to change

 the version release is defined as such 
 1.0.0
 (main release).(minor release).(patch update)

 git tag
 git tag -l "v17*"
 git tag -l "*beta*"

 to create tag 
 git tag tagname (lightweight tag)

 git tag -a tagname (annotated tag)
 git show tagname

  git tag mytag 0cc80f9 to add tag for particular commit hash

   git tag mytag cbfa6e1 -f
this will force a tag to be added to that particular commit, even if it already exists in history.

to delete tag
 git tag -d deleteme

To push tags to remote repository:
git push origin tagname

git push origin --tags (to push all tags together)

git config
git config --local user.name "Samridhi"
git config --global user.email "sam@gmail.com"

in config file 
[color]
	ui = true
[color "branch"]
	local = cyan bold
	current = yellow

Inside of refs, you'll find a heads directory refs/heads contains one file per branch in a
repository.  Each file is named after a branch and contains the hash of the commit at the tip
of the branch. 

For example refs/heads/master contains the commit hash of the last commit on the master branch.

Refs also contains a refs/tags folder which contains one file for each tag in the repo

4 types of git objects = commit , tree , blob , annotated tag

Git uses SHA1  cryptographic algorithm to generate hash value even for commits . They are 40 digits hexadecimal digits.

 echo "he" | git hash-object --stdin
to convert any value in hash

 echo "he" | git hash-object --stdin -w to directly store the hash value in database

 git cat-file -p hash value  = will give original value

git cat-file -p hash value > filename = restore the contentof the file

in blob(binary large object) we store the content of file and nothing else
tree stores the list of blobs with their names as key like it stores content of directory
commit stores the snapshot of tree and the parent commit id(s) and author name and email and commiter details etc

$ git cat-file -p main^{tree} for tree

git cat-file -t 59e85699 = to see the type of object

git reflog show HEAD = TO SEE HEAD  IS POINTING WHERE RIGHT NOW

git checkout HEAD~2 = MEANS THE COMMIT OF PARENTS 2 GENERATION AGO THAT IS GRANDPARENTS
git checkout HEAD@{2} = two moves ago in ref log of head

EVERY ENTRY IN LOG has timestamp associted with it.
git reflog master@{one.week.ago}