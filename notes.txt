Git is a Version control system that is a vcs is something which can track and manage the changes of file

Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency

Git can stand for global information tracker

ls , cd 
type nul > file.txt = to create new file
start . =  to open the folders
start Desktop to see what is inside Desktop
ls Desktop also be used

ls Desktop/Pets

pwd = my current location where i am right now

 touch purple.js = can also be used to create new file

 mkdir yellow cyan = makes new directory or folders , it avoids creating duplicate videos

 rm purple.js = it permanentaly deletes the file and not folders

 ls -a is used to show hidden directories

 rm -rf used to delete a folder permanentaly

next we can do git init , git status . git add . ,  git commit -m "initial commit"
 
each commit should focus on one single thing

git commit and it will open to vim editor here press i to insert message and press esc & :wq q to quit and w to write and save

 git config --global core.editor "code --wait" to use vs code as editor  instead of cmd and here we can write long messages too

 https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config for refrence

git log --abbrev-commit
git log --oneline
these two commands help to remove extra space from logs     

we can do git commit with git kraken also

suppose u forgot to add a file or made a typo 
 git commit -m 'some commit'
 git add forgotten_file
 git commit --amend

so if we want to commit again after some changes and we write

https://www.toptal.com/developers/gitignore to add gitignore file with some useful content

in gitignore file write as node_modules/ in order to ignore all files inside that folder

https://git-scm.com/docs/gitignore REFER PATTERN FORMATS

head -> master means the current location is of master branch 

git branch = shows the list of all  branches present in your repository and  which one is currently active (master) has * mark 

git branch branchname  -> creates a new branch named branchname
git switch branchname  -> moves your head to branchname and switches you to that branch

git switch -c branchname -> at a go create and switch branches

git checkout branchname =  also used to switch brances and some other use cases also
 git checkout music

 git commit -a -m "new music" to add file and message pass

 if we create a new file and withot commiting if we will switch branc and then it will follow you until  you commit

 git branch -D emptyPlaylist  to delete the branch but you should be in some other branch

  git branch -m genZMusic -> renames the current branch

git checkout 7d0fa18 to switch to previous commit that is in detached head state

HEAD~1 refers to the commit before HEAD (parent)
HEAD~2 refers to 2 commits before HEAD (grandparent)

git checkout HEAD~1

git checkout HEAD dog.txt = to remove extra content from file and get updated from previous commit 
or 
 git checkout -- cat.txt dog.txt

Suppose you've made some changes to a file since your
 last commit. You've saved the file but then realize you
 definitely do NOT want those changes anymore!
 To restore the file to the contents in the HEAD, 
use 

git restore <file-name>

git restore --source HEAD~2 dog.txt to get content of 2 commits prior
 git restore --staged secret.txt to restore staged content into unstaged content


git reset 60752f7
 Suppose you've just made a couple of commits on the
 master branch, but you actually meant to make them on
 a separate branch instead.  To undo those commits, you
 can use git reset.
 git reset <commit-hash> will reset the repo back to a
 specific commit.  The commits are gone  it will not chnage file content but will simply move to previous commit

  git reset --hard b1c1db5
used to undo the changes and come to particular commit at a time once the content is gone it can not be redo 

git revert instead creates a brand new commit which
 reverses/undos the changes from a commit. Because it
 results in a new commit, you will be prompted to enter a
 commit message  
  git revert 65d103a

when you r working in team then recommend to use git revert as git reset will remove the history while others still have it so might be confusion 